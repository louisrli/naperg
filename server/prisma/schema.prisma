generator client {
  provider = "prisma-client-js"
}

datasource db {
  // LL: What is SQLite?
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                         Int                         @id @default(autoincrement())
  fullName                   String?
  email                      String                      @unique
  password                   String
  feeds                      Feed[]
  boards                     Board[]
  userSourceFavorites        UserSourceFavorite[]
  userActivatedSubscriptions UserActivatedSubscription[]
  createdAt                  DateTime                    @default(now())
  setting                    Setting?

  @@map("users")
}

// user settings like theme

model Setting {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
  /// light or dark
  theme  String

  @@map("settings")
}

// integrations

model SubscriptionSpec {
  id                        Int                         @id @default(autoincrement())
  /// FREE / PRO / TRIAL
  type                      String
  priceInCents              Int
  description               String
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  userActivatedSubscription UserActivatedSubscription[]

  @@map("subscriptions")
}

/// subscriptions which are were bougth by User
model UserActivatedSubscription {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  subscription   SubscriptionSpec @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int
  expiredAt      DateTime

  @@map("user_activated_subscriptions")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  url       String
  imgUrl    String?
  source    Source   @relation(fields: [sourceId], references: [id])
  sourceId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

// A single source that should be updated.
model Source {
  id                  Int                  @id @default(autoincrement())
  title               String
  url                 String
  posts               Post[]
  userSourceFavorites UserSourceFavorite[]
  SourceFeedRelation  SourceFeedRelation[]

  @@map("sources")
}

model Feed {
  id                 Int                  @id @default(autoincrement())
  user               User                 @relation(fields: [userId], references: [id])
  userId             Int
  SourceFeedRelation SourceFeedRelation[]
  isFavorite         Boolean

  @@map("feeds")
}

model SourceFeedRelation {
  id       Int    @id @default(autoincrement())
  source   Source @relation(fields: [sourceId], references: [id])
  feed     Feed   @relation(fields: [feedId], references: [id])
  sourceId Int
  feedId   Int

  @@map("source_feed_relations")
}

model UserSourceFavorite {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  source   Source @relation(fields: [sourceId], references: [id])
  sourceId Int

  @@map("user_source_favorites")
}

model Board {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [userId], references: [id])
  userId     Int
  isFavorite Boolean

  @@map("boards")
}
